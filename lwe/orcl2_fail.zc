
operator O1 : (Fq * Fq) -> Fq.
operator O2 : (Fq * Fq) -> Fq.

  (* wish to say that the distribution:
 
  x <-$ Fq;
  i : Fq chosen from adversary 
  O1(x,i)

  is indistinguishable from distribution:

  x <-$ Fq;
  i : Fq chosen from adversary
  O2(x,i)

 *)

adversary AO: () -> Bool.
oracle orcl_AO : Fq -> Fq.

assumption dec_O1O2 
[
  (* The oracle can be called only once *)
  b <- AO() with orcl_AO(i) [once] = {   
    x <-$ Fq;
    return O1(i,x);
  };
] 
[
  b <- AO() with orcl_AO(i) [once] = {
    x <-$ Fq;
    return O2(i,x);
  };
]
.

oracle orcl : Fq -> Fq.
adversary A : () -> Bool.

bound_dist [
  let tt = ();
  b' <- A() with orcl(i) = {
    let i' = i;
    x <-$ Fq;
    let r = O1(i',x);
    return r;
  };
  let b = b';
] : b
[
  b <- A() with orcl(i) = {
    x <-$ Fq;
    return O2(i,x);
  };
] : b.

print_goals : main1.

assumption_decisional * dec_O1O2 -> [orcl_AO`x,orcl`x;orcl_AO`i,orcl`i'; b,b] 
   1 3 [2 [(1 1 3 orcl_AO)] ].

