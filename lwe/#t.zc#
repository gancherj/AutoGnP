
operator Chi : BS_r -> Matrix_{m+1,1}.
adversary A_lwe : (Matrix_{n,m+1} * Matrix_{m+1,1}) -> Bool.
assumption LWE
 [ A <-$ Matrix_{n,m+1}; s <-$ Matrix_{n,1}; r <-$ BS_r; b <- A_lwe(A, (tr A) * s + Chi(r));]
 [ A <-$ Matrix_{n,m+1}; u <-$ Matrix_{m+1,1}; b <- A_lwe(A, u);].

 operator bit_inj : BS_m -> Matrix_{m,1}.
 adversary A_lhl : (Matrix_{n,m} * Matrix_{n,1}) -> Bool.
 assumption LHL ([A])
 [ A <-$ Matrix_{n,m}; e <-$ BS_m; b <- A_lhl(A, A * bit_inj(e));]
 [ A <-$ Matrix_{n,m}; u <-$ Matrix_{n,1}; b <- A_lhl(A, u);].

adversary A_pke : (Matrix_{n,m} * Matrix_{m,1} * Matrix_{n,1} * Matrix_{1,1}) -> Bool.

operator Mu : () -> Matrix_{1,1}.

adversary A_ : Matrix_{1,1} -> Bool.  

bound_adv [
  b <-$ Bool;
  let m = b?Mu(()):0_{1,1};
    r <-$ Matrix_{1,1};
    b' <- A_(r + m);
] : b = b'.

rnd! r (x -> x - (b?Mu(()):0_{1,1})) (x -> x + (b?Mu(()):0_{1,1})).

norm.
move 1 3.
indep!.
qed.

adversary Aa : (Matrix_{n,m} * Matrix_{n,1}) -> Bool.
bound_adv [
  b <-$ Bool;
  A <-$ Matrix_{n,m};
  re <-$ BS_m;
  let e = bit_inj(re);
    u <-$ Matrix_{n,1};
  
  b' <- Aa(A, (b?u:A * e));
  ] : b = b'.
norm.
move A 1.
assumption_decisional! LHL -> t.
norm.
rnd! u (x -> x + t) (x -> x - t).
norm.
rnd! t (x -> x - (b?u:0_{n,1})) (x -> x + (b?u:0_{n,1})).
norm.
move 2 5.
indep!.
Q
bound_adv [
  let mu = Mu(());
    b <-$ Bool; let m = 0_{1,1};
    re <-$ BS_m;
  let e = bit_inj(re);
  
   A <-$ Matrix_{n,m};
  let u = A * e;
    s <-$ Matrix_{n,1};
  
     r <-$ BS_r;
   let X_ = tr Chi(r);
   let X = tr (sl X_);
   let x = tr (sr X_);

   let c1 = (tr A) * s + X;
   let c2 = (tr u) * s + x + m;
   b' <- A_pke (A,c1,u,c2);
 ] : b=b'.
norm.
move 3 1.
move 3 2.
enable_debug.
assumption_decisional! LHL -> t.